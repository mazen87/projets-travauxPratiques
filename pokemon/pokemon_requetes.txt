//4) Créez une requête qui affiche l’intégralité des pokémons
SELECT * from pokemon ;
5) Créez une requête qui compte le nombre total de pokémons
SELECT count(*)from pokemon;	
//6) Créez une requête qui compte le nombre total de pokémons différents 
SELECT DISTINCT COUNT(*)from pokemon p inner join pokedex x on p.id_pokedex=x.id; 
//7) Classez les pokémons par type
SELECT x.nom, p.nom, p.energie from pokemon p inner join pokedex x on p.id_pokedex = x.id ORDER by x.nom;
//8) Créez une requête qui affiche les pokémons et leur dresseur courant
SELECT d.nom as nom_dresseur_actif , r.date_debut as date_debut_relation, p.nom as nom_pokemon from dresseur d inner join relation_p_d r inner join pokemon p on d.id = r.id_dresseur and p.id = r.id_pokemon where (r.date_fin is null or (select now() <r.date_fin))
//9) Créez une requête qui affiche pour un pokémon tous ses dresseurs 
select distinct p.nom as nom_pokemon , r.date_debut, r.date_fin ,d.nom as nom_dresseur  from pokemon p inner join relation_p_d r inner join dresseur d on p.id = r.id_pokemon and r.id_dresseur = d.id where p.id=1;
//10) Requête bonus complexe : Afficher les combats qui ont eu lieu entre les dresseurs et leurs pokémons triés par date de combat
//1
select pokemon1.nom as pokemon1, pokemon2.nom as pokemon2 from pokemon as pokemon1 ,pokemon as pokemon2 , combat as c  where pokemon1.id = c.id_pok1 and pokemon2.id = c.id_pok2;
//2
select pokemon1.nom as pokemon1, pokemon2.nom as pokemon2, c.date_combat from pokemon as pokemon1 ,pokemon as pokemon2 , combat as c  where pokemon1.id = c.id_pok1 and pokemon2.id = c.id_pok2;
//3
select pokemon1.nom as pokemon1, pokemon2.nom as pokemon2, c.date_combat from pokemon as pokemon1 inner join pokemon as pokemon2 inner join combat as c  on pokemon1.id = c.id_pok1 and pokemon2.id = c.id_pok2 order by c.date_combat;
//4 complete

select * from pokemon as pokemon1, pokemon as pokemon2, combat as c, relation_p_d as rel1, relation_p_d as rel2, dresseur as d1, dresseur as d2 WHERE pokemon1.id = c.id_pok1 AND pokemon2.id = c.id_pok2 AND rel1.id_pokemon=c.id_pok1 AND rel2.id_pokemon=c.id_pok2 AND rel2.date_fin IS NOT NULL AND rel1.date_fin IS NOT NULL AND d1.id = rel1.id_dresseur AND d2.id = rel2.id_dresseur order by c.date_combat;

//complete 1
select dresseur1.nom as dresseur1, dresseur2.nom as dresseur2, pokemon1.nom as pokemon1, pokemon2.nom as pokemon2, combat.date_combat from dresseur as dresseur1 , dresseur as dresseur2, relation_p_d as rel1,
relation_p_d as rel2, pokemon as pokemon1,pokemon as pokemon2 , combat where dresseur1.id = rel1.id_dresseur and dresseur2.id=rel2.id_dresseur and pokemon1.id = rel1.id_pokemon and rel2.id_pokemon = pokemon2.id and rel1.id_pokemon = combat.id_pok1 and rel2.id_pokemon = combat.id_pok2 and rel1.date_fin is not null and rel2.date_fin is not null order by combat.date_combat;
//complete 2 
select dresseur1.nom as dresseur1, dresseur2.nom as dresseur2, pokemon1.nom as pokemon1, pokemon2.nom as pokemon2 , combat.date_combat from dresseur as dresseur1 inner join dresseur as dresseur2 inner join relation_p_d as rel1 inner join relation_p_d as rel2 inner join pokemon as pokemon1 INNER join pokemon as pokemon2 INNER join combat on dresseur1.id = rel1.id_dresseur and pokemon1.id = rel1.id_pokemon and pokemon1.id = combat.id_pok1 and dresseur2.id = rel2.id_dresseur and pokemon2.id=rel2.id_pokemon and pokemon2.id = combat.id_pok2 where rel1.date_fin is not null and rel2.date_fin is not null order by combat.date_combat  